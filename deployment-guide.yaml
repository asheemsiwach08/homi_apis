deployment_guide:
  title: "HOM-i WhatsApp OTP Verification API - Deployment User Guide"
  version: "1.0.0"
  last_updated: "2024-12-19"
  description: "Comprehensive deployment guide for WhatsApp OTP verification, lead creation, and status tracking API"

  project_overview:
    name: "HOM-i WhatsApp OTP Verification API"
    technology_stack:
      - "FastAPI (Python web framework)"
      - "Supabase (PostgreSQL database)"
      - "Gupshup API (WhatsApp messaging)"
      - "Basic Application API (Lead management)"
      - "Docker & Docker Compose"
      - "Jenkins CI/CD"
    features:
      - "WhatsApp OTP management with 3-minute expiry"
      - "Lead creation and status tracking"
      - "Phone number normalization and validation"
      - "Supabase storage with local fallback"
      - "RESTful API with comprehensive error handling"
      - "Async/await support for high performance"

  prerequisites:
    system_requirements:
      minimum:
        cpu: "1 core"
        memory: "512MB RAM"
        storage: "1GB free space"
        os: "Linux, Windows, or macOS"
      recommended:
        cpu: "2 cores"
        memory: "1GB RAM"
        storage: "2GB free space"
        os: "Ubuntu 20.04+ or CentOS 8+"
    
    software_requirements:
      development:
        - "Python 3.8+"
        - "Git"
        - "Docker & Docker Compose"
        - "Virtual environment (venv)"
      production:
        - "Docker & Docker Compose"
        - "Nginx (optional, for reverse proxy)"
        - "SSL certificates (for HTTPS)"
    
    external_services:
      required:
        - "Gupshup WhatsApp API account"
        - "Basic Application API credentials"
      optional:
        - "Supabase account and project"
        - "AWS ECR (for container registry)"
        - "Jenkins server (for CI/CD)"

  deployment_scenarios:
    local_development:
      title: "Local Development Setup"
      description: "Set up the API for local development and testing"
      steps:
        - step: 1
          action: "Clone Repository"
          command: "git clone <repository-url>"
          details: "Clone the project to your local machine"
        
        - step: 2
          action: "Navigate to Project"
          command: "cd otpVerification"
          details: "Change to project directory"
        
        - step: 3
          action: "Create Virtual Environment"
          command: |
            python -m venv .venv
            .\.venv\Scripts\activate  # Windows
            source .venv/bin/activate  # Linux/Mac
          details: "Create and activate Python virtual environment"
        
        - step: 4
          action: "Install Dependencies"
          command: "pip install -r requirements.txt"
          details: "Install all required Python packages"
        
        - step: 5
          action: "Configure Environment"
          command: |
            cp env.example .env
            # Edit .env with your configuration
          details: "Copy and configure environment variables"
        
        - step: 6
          action: "Run Application"
          command: |
            python -m app.main
            # OR
            uvicorn app.main:app --host 0.0.0.0 --port 5000 --reload
          details: "Start the FastAPI application"
        
        - step: 7
          action: "Verify Installation"
          command: "curl http://localhost:5000/api_v1/health"
          details: "Check if the API is running correctly"
      
      verification:
        - "API accessible at http://localhost:5000"
        - "Health endpoint returns 200 OK"
        - "Swagger docs available at http://localhost:5000/docs"
        - "Environment variables loaded correctly"

    docker_development:
      title: "Docker Development Setup"
      description: "Run the API using Docker for consistent development environment"
      steps:
        - step: 1
          action: "Clone and Navigate"
          command: |
            git clone <repository-url>
            cd otpVerification
          details: "Get the project and enter directory"
        
        - step: 2
          action: "Configure Environment"
          command: |
            cp env.example .env
            # Edit .env with your configuration
          details: "Set up environment variables"
        
        - step: 3
          action: "Build and Run"
          command: "docker-compose up --build"
          details: "Build Docker image and start container"
        
        - step: 4
          action: "Verify Deployment"
          command: "curl http://localhost:5000/api_v1/health"
          details: "Check API health status"
      
      advantages:
        - "Consistent environment across team members"
        - "No need to install Python locally"
        - "Easy to switch between different configurations"
        - "Isolated dependencies"

    docker_production:
      title: "Docker Production Deployment"
      description: "Deploy the API to production using Docker with optimized settings"
      steps:
        - step: 1
          action: "Prepare Production Environment"
          command: |
            git clone <repository-url>
            cd otpVerification
          details: "Get the latest production code"
        
        - step: 2
          action: "Configure Production Environment"
          command: |
            cp env.example .env
            # Edit .env with production values
            # Set DEBUG=False
            # Configure all API keys and URLs
          details: "Set up production environment variables"
        
        - step: 3
          action: "Build Production Image"
          command: "docker-compose -f docker-compose.prod.yml up --build -d"
          details: "Build optimized production image and run in background"
        
        - step: 4
          action: "Verify Production Deployment"
          command: |
            docker ps
            curl http://localhost:5000/api_v1/health
          details: "Check container status and API health"
        
        - step: 5
          action: "Monitor Logs"
          command: "docker-compose -f docker-compose.prod.yml logs -f"
          details: "Monitor application logs for issues"
      
      production_features:
        - "Resource limits (CPU: 1.0, Memory: 1GB)"
        - "Security optimizations (no-new-privileges)"
        - "Read-only filesystem with tmpfs"
        - "Automatic restart on failure"
        - "Production logging configuration"

    jenkins_ci_cd:
      title: "Jenkins CI/CD Pipeline Deployment"
      description: "Automated deployment using Jenkins pipeline with AWS ECR"
      prerequisites:
        - "Jenkins server with Docker plugin"
        - "AWS ECR repository"
        - "AWS credentials configured in Jenkins"
        - "Slack integration (optional)"
      
      jenkins_credentials:
        - name: "aws-credentials"
          type: "Username/Password"
          description: "AWS Access Key ID and Secret Access Key"
        
        - name: "gupshup"
          type: "Secret file"
          description: "Environment variables file (.env)"
        
        - name: "slack_channel_secret"
          type: "Secret text"
          description: "Slack webhook token"
      
      pipeline_stages:
        - stage: "Checkout"
          description: "Clone source code from Git repository"
        
        - stage: "Inject Environment"
          description: "Load environment variables from Jenkins secrets"
        
        - stage: "Setup Python"
          description: "Create virtual environment and install dependencies"
        
        - stage: "AWS ECR Login"
          description: "Authenticate with AWS ECR registry"
        
        - stage: "Build Docker Image"
          description: "Build optimized Docker image"
        
        - stage: "Push to ECR"
          description: "Push image to AWS ECR repository"
        
        - stage: "Deploy Container"
          description: "Stop old container and run new one"
      
      deployment_commands:
        build_image: "docker build -t ${DOCKER_TAG} ."
        tag_image: "docker tag ${DOCKER_TAG} ${DOCKER_REGISTRY}/${DOCKER_TAG}"
        push_image: "docker push ${DOCKER_REGISTRY}/${DOCKER_TAG}"
        run_container: |
          docker run -d -p 5000:5000 \
            -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
            -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
            ${DOCKER_REGISTRY}/${DOCKER_TAG}

  environment_configuration:
    required_variables:
      server_config:
        HOST: "0.0.0.0"
        PORT: "5000"
        DEBUG: "False"
      
      basic_application_api:
        BASIC_APPLICATION_API_URL: "https://api.basicapplication.com"
        BASIC_APPLICATION_USER_ID: "your_user_id"
        BASIC_APPLICATION_API_KEY: "your_api_key"
      
      gupshup_whatsapp:
        GUPSHUP_API_KEY: "your_gupshup_api_key"
        GUPSHUP_SOURCE: "your_source_number"
        GUPSHUP_API_URL: "https://api.gupshup.io/wa/api/v1/msg"
      
      whatsapp_templates:
        GUPSHUP_WHATSAPP_OTP_TEMPLATE_ID: "your_otp_template_id"
        GUPSHUP_WHATSAPP_OTP_SRC_NAME: "HomiAi"
        GUPSHUP_LEAD_CREATION_TEMPLATE_ID: "your_lead_creation_template_id"
        GUPSHUP_LEAD_CREATION_SRC_NAME: "your_lead_creation_src_name"
        GUPSHUP_LEAD_STATUS_TEMPLATE_ID: "your_lead_status_template_id"
        GUPSHUP_LEAD_STATUS_SRC_NAME: "your_lead_status_src_name"
      
      supabase_config:
        SUPABASE_URL: "https://your-project.supabase.co"
        SUPABASE_ANON_KEY: "your_supabase_anon_key"
        SUPABASE_SERVICE_ROLE_KEY: "your_supabase_service_role_key"
      
      otp_config:
        OTP_EXPIRY_MINUTES: "3"
    
    optional_variables:
      logging:
        LOG_LEVEL: "INFO"
        LOG_FILE: "/app/logs/app.log"
      
      security:
        CORS_ORIGINS: "http://localhost:3000,https://yourdomain.com"
        API_KEY_HEADER: "X-API-Key"
      
      performance:
        WORKERS: "4"
        MAX_CONNECTIONS: "1000"

  database_setup:
    supabase_setup:
      title: "Supabase Database Configuration"
      steps:
        - step: 1
          action: "Create Supabase Project"
          details: "Go to supabase.com and create a new project"
        
        - step: 2
          action: "Get API Keys"
          details: "Navigate to Settings > API and copy Project URL and keys"
        
        - step: 3
          action: "Create Database Tables"
          details: "Run SQL scripts from database_setup/ directory"
        
        - step: 4
          action: "Configure RLS Policies"
          details: "Set up Row Level Security policies for data protection"
        
        - step: 5
          action: "Test Connection"
          details: "Verify database connectivity from application"
      
      sql_scripts:
        - file: "database_setup/create_tables.sql"
          description: "Create OTP storage and leads tables"
        
        - file: "database_setup/setup_rls.sql"
          description: "Configure Row Level Security policies"
        
        - file: "database_setup/create_indexes.sql"
          description: "Create performance indexes"
    
    local_fallback:
      description: "If Supabase is not configured, the application automatically falls back to local in-memory storage"
      features:
        - "Thread-safe operations"
        - "Automatic OTP expiry"
        - "Used OTP tracking"
        - "No data persistence (resets on restart)"

  api_endpoints:
    base_url: "/api_v1"
    
    otp_endpoints:
      - endpoint: "POST /send-otp"
        description: "Send OTP via WhatsApp"
        request_body:
          phone_number: "string (various formats supported)"
        response:
          success: "200 OK with OTP sent confirmation"
          error: "400 Bad Request for invalid phone number"
      
      - endpoint: "POST /verify-otp"
        description: "Verify OTP code"
        request_body:
          phone_number: "string"
          otp: "string"
        response:
          success: "200 OK with verification result"
          error: "400 Bad Request for invalid OTP"
      
      - endpoint: "POST /resend-otp"
        description: "Resend OTP to phone number"
        request_body:
          phone_number: "string"
        response:
          success: "200 OK with resend confirmation"
          error: "400 Bad Request if no existing OTP"
    
    lead_endpoints:
      - endpoint: "POST /create-lead"
        description: "Create new lead with Basic Application API"
        request_body:
          first_name: "string"
          last_name: "string"
          mobile_number: "string"
          email: "string"
          pan_number: "string"
          loan_type: "string"
          loan_amount: "number"
          loan_tenure: "number"
          gender: "string"
          dob: "string (DD/MM/YYYY)"
          pin_code: "string"
        response:
          success: "200 OK with lead creation result"
          error: "400 Bad Request for invalid data"
      
      - endpoint: "GET /lead-status/{basic_application_id}"
        description: "Get lead status by application ID"
        response:
          success: "200 OK with lead status"
          error: "404 Not Found if lead doesn't exist"
      
      - endpoint: "GET /lead-status/mobile/{mobile_number}"
        description: "Get lead status by mobile number"
        response:
          success: "200 OK with lead status"
          error: "404 Not Found if lead doesn't exist"
    
    utility_endpoints:
      - endpoint: "GET /health"
        description: "Health check endpoint"
        response: "200 OK with service status"
      
      - endpoint: "GET /docs"
        description: "Interactive API documentation (Swagger UI)"
      
      - endpoint: "GET /redoc"
        description: "Alternative API documentation (ReDoc)"

  phone_number_handling:
    normalization:
      description: "All phone numbers are automatically normalized to include country code 91"
      supported_formats:
        - "917888888888 (already has country code)"
        - "788888888 (without country code)"
        - "+917888888888 (with + prefix)"
        - "0788888888 (with leading 0)"
        - "888888888 (9 digits)"
        - "88888888 (8 digits)"
        - "Numbers with spaces, dashes, parentheses"
      
      validation_pattern: "^\\+91[1-9]\\d{9,11}$"
      storage: "Use original phone number for storage, normalized number for WhatsApp service"

  testing:
    manual_testing:
      title: "Manual API Testing"
      tools:
        - "Postman"
        - "cURL"
        - "Swagger UI (built-in)"
      
      test_scenarios:
        - scenario: "OTP Flow"
          steps:
            - "Send OTP to valid phone number"
            - "Verify OTP with correct code"
            - "Verify OTP with incorrect code"
            - "Resend OTP"
            - "Test OTP expiry (wait 3 minutes)"
        
        - scenario: "Lead Management"
          steps:
            - "Create lead with valid data"
            - "Create lead with invalid data"
            - "Check lead status by application ID"
            - "Check lead status by mobile number"
        
        - scenario: "Phone Number Formats"
          steps:
            - "Test various phone number formats"
            - "Verify normalization works correctly"
            - "Test invalid phone numbers"
    
    automated_testing:
      title: "Automated Testing"
      test_file: "test_api.py"
      command: "python test_api.py"
      coverage:
        - "OTP generation and verification"
        - "Lead creation and status tracking"
        - "Phone number validation"
        - "Error handling"
        - "Database operations"

  monitoring_and_logging:
    application_logs:
      location: "/app/logs/app.log"
      log_levels:
        - "DEBUG: Detailed debugging information"
        - "INFO: General application information"
        - "WARNING: Warning messages"
        - "ERROR: Error messages"
        - "CRITICAL: Critical errors"
    
    health_monitoring:
      endpoint: "GET /api_v1/health"
      checks:
        - "Application status"
        - "Database connectivity"
        - "WhatsApp service status"
        - "Basic Application API connectivity"
    
    performance_monitoring:
      metrics:
        - "Response times"
        - "Request rates"
        - "Error rates"
        - "Database query performance"
        - "WhatsApp API response times"

  troubleshooting:
    common_issues:
      - issue: "Supabase Connection Failed"
        symptoms:
          - "Database operations fail"
          - "Error: Supabase client not initialized"
        solutions:
          - "Check SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY"
          - "Verify Supabase project is active"
          - "Check network connectivity"
          - "Verify RLS policies are configured"
      
      - issue: "WhatsApp API Errors"
        symptoms:
          - "OTP not sent"
          - "Error: Gupshup API failed"
        solutions:
          - "Verify GUPSHUP_API_KEY is correct"
          - "Check GUPSHUP_SOURCE number"
          - "Verify template IDs are valid"
          - "Check WhatsApp template approval status"
      
      - issue: "Basic Application API Errors"
        symptoms:
          - "Lead creation fails"
          - "Error: Basic API connection failed"
        solutions:
          - "Verify API credentials"
          - "Check API endpoint URL"
          - "Validate request payload format"
          - "Check API rate limits"
      
      - issue: "Docker Container Issues"
        symptoms:
          - "Container fails to start"
          - "Port conflicts"
          - "Environment variables not loaded"
        solutions:
          - "Check Docker logs: docker logs <container_id>"
          - "Verify port 5000 is available"
          - "Ensure .env file exists and is properly formatted"
          - "Check Docker daemon is running"
      
      - issue: "Phone Number Validation Errors"
        symptoms:
          - "Invalid phone number format errors"
          - "OTP not sent to valid numbers"
        solutions:
          - "Check phone number format"
          - "Verify normalization is working"
          - "Test with different phone number formats"
    
    debugging_commands:
      - command: "docker logs <container_id>"
        description: "View container logs"
      
      - command: "docker exec -it <container_id> /bin/bash"
        description: "Access container shell"
      
      - command: "curl http://localhost:5000/api_v1/health"
        description: "Check API health"
      
      - command: "docker-compose logs -f"
        description: "Follow application logs"
      
      - command: "docker ps"
        description: "List running containers"

  security_considerations:
    environment_variables:
      - "Never commit .env files to version control"
      - "Use strong, unique API keys"
      - "Rotate API keys regularly"
      - "Use environment-specific configurations"
    
    api_security:
      - "Validate all input data"
      - "Implement rate limiting"
      - "Use HTTPS in production"
      - "Monitor for suspicious activity"
    
    database_security:
      - "Use Row Level Security (RLS) policies"
      - "Limit database access permissions"
      - "Regular security updates"
      - "Backup data regularly"
    
    container_security:
      - "Run containers as non-root user"
      - "Use read-only filesystem where possible"
      - "Scan images for vulnerabilities"
      - "Keep base images updated"

  backup_and_recovery:
    data_backup:
      supabase:
        - "Use Supabase dashboard for database backups"
        - "Export data regularly"
        - "Test backup restoration"
      
      application:
        - "Backup environment configurations"
        - "Backup Docker images"
        - "Document deployment procedures"
    
    disaster_recovery:
      - "Have backup deployment procedures"
      - "Maintain multiple environment configurations"
      - "Test recovery procedures regularly"
      - "Keep documentation updated"

  scaling_considerations:
    horizontal_scaling:
      - "Use load balancer for multiple instances"
      - "Configure shared database"
      - "Use external cache (Redis)"
      - "Monitor resource usage"
    
    vertical_scaling:
      - "Increase container resources"
      - "Optimize database queries"
      - "Use connection pooling"
      - "Monitor performance metrics"

  maintenance:
    regular_tasks:
      - "Update dependencies"
      - "Monitor logs for errors"
      - "Check API rate limits"
      - "Verify external service status"
      - "Backup data"
      - "Update security patches"
    
    monitoring:
      - "Set up alerts for critical errors"
      - "Monitor API response times"
      - "Track WhatsApp delivery rates"
      - "Monitor database performance"
      - "Check container resource usage"

  support_and_contact:
    documentation:
      - "README.md: Project overview and setup"
      - "API Documentation: Available at /docs endpoint"
      - "Code comments: Inline documentation"
    
    troubleshooting_resources:
      - "Application logs"
      - "Docker logs"
      - "External API documentation"
      - "Supabase dashboard"
    
    contact_information:
      - "Development team"
      - "System administrators"
      - "External service support contacts" 