# Cursor Rules for HOM-i WhatsApp OTP, Lead Creation & Status API

## Project Overview
This is a comprehensive FastAPI-based REST API for WhatsApp OTP verification, lead creation, and status tracking using Gupshup API with Supabase PostgreSQL storage and automatic fallback to local storage.

## Code Style Guidelines
- Use async/await for all API calls
- Follow PEP 8 style guidelines
- Use type hints for all function parameters and return values
- Keep functions focused and single-purpose
- Add docstrings for all public functions
- Use proper error handling with HTTP exceptions
- Remove unused methods and functions to maintain clean codebase

## File Organization
- `app/main.py`: FastAPI application entry point
- `app/config/settings.py`: Configuration and environment variables
- `app/services/database_service.py`: Supabase/local storage operations and database logic
- `app/services/whatsapp_service.py`: Gupshup WhatsApp API integration
- `app/services/basic_application_service.py`: Basic Application API integration
- `app/models/schemas.py`: Pydantic models for validation
- `app/api/endpoints/`: API endpoint modules (otp.py, leads.py, health.py, whatsapp_webhook.py)
- `app/utils/validators.py`: Data validation utilities

## Security Rules
- Never log OTP values
- Use environment variables for sensitive data
- Validate all input data
- Implement proper error handling
- Use HTTPS in production
- Validate API credentials before making external calls

## API Design Rules
- Use consistent response format
- Implement proper HTTP status codes (200, 400, 404, 409, 422, 500)
- Add comprehensive error messages
- Use Pydantic for request/response validation
- Keep endpoints RESTful
- All endpoints use `/api_v1` prefix
- Use proper HTTP exceptions for error responses

## Phone Number Handling
- **Smart normalization**: Phone numbers are intelligently processed based on their format
- **Multiple input formats supported**:
  - `9173457840` (10 digits starting with 91 - actual phone number)
  - `917888888888` (12 digits with country code)
  - `788888888` (10 digits without country code)
  - `+917888888888` (with + prefix)
  - `0788888888` (with leading 0)
  - `888888888` (9 digits)
  - `88888888` (8 digits)
  - Numbers with spaces, dashes, parentheses
- **Validation pattern**: `^\+91[1-9]\d{9,11}$`
- **Storage**: Use original phone number for storage, normalized number for WhatsApp service
- **Smart processing**: Distinguishes between country codes and actual phone numbers starting with 91

## Lead Management Rules
- Validate all lead data before processing
- Support multiple loan types with automatic mapping
- Integrate with Basic Application API for lead creation
- Store lead data in Supabase database
- Send WhatsApp notifications for lead events
- Support lead status tracking by mobile number or application ID

## WhatsApp Integration Rules
- Use Gupshup API for all WhatsApp communications
- Support multiple templates for different use cases (OTP, lead creation, status updates)
- Handle API responses properly (202 status is success)
- Implement proper error handling for WhatsApp failures
- Use async operations for all WhatsApp API calls

## Testing Guidelines
- Test all endpoints with valid and invalid data
- Mock external API calls in tests
- Test OTP expiry functionality
- Verify storage operations (Supabase and local fallback)
- Test error scenarios
- Test phone number normalization with various formats
- Test lead creation and status tracking
- Test WhatsApp notification delivery

## Documentation Requirements
- Update README.md for any major changes
- Keep API documentation current
- Document environment variables
- Provide usage examples with various phone number formats
- Include troubleshooting section
- Document phone number normalization rules
- Document lead management workflow
- Document WhatsApp template requirements

## Storage Solution
- **Primary**: Supabase PostgreSQL for persistent storage
- **Fallback**: Local in-memory storage if Supabase unavailable
- **Automatic expiry**: OTPs expire after 3 minutes
- **Thread-safe**: Local storage uses locks for concurrent access
- **OTP Lifecycle**: OTPs are marked as `is_used = true` after verification (not deleted)
- **Audit Trails**: Used and expired OTPs remain in database for analytics and compliance
- **Data Retention**: Maintains OTP and lead history for security investigations and usage patterns
- **Lead Storage**: Store complete lead data with Basic Application API responses

## Environment Variables (Updated)
- `BASIC_APPLICATION_API_URL`: Basic Application API endpoint
- `BASIC_APPLICATION_USER_ID`: Basic Application API user ID
- `BASIC_APPLICATION_API_KEY`: Basic Application API key
- `GUPSHUP_API_KEY`: Gupshup WhatsApp API key
- `GUPSHUP_SOURCE`: Gupshup source number
- `GUPSHUP_WHATSAPP_OTP_TEMPLATE_ID`: OTP template ID
- `GUPSHUP_LEAD_CREATION_TEMPLATE_ID`: Lead creation template ID
- `GUPSHUP_LEAD_STATUS_TEMPLATE_ID`: Lead status template ID
- `SUPABASE_URL`: Supabase project URL
- `SUPABASE_SERVICE_ROLE_KEY`: Supabase service role key (only service role key is used)

## Removed/Unused Components
- `SUPABASE_ANON_KEY`: Removed - only service role key is used
- `WHATSAPP_API_URL` and `WHATSAPP_API_KEY`: Removed - legacy WhatsApp API not used
- `get_all_leads()`: Removed - not used in any endpoints
- `get_whatsapp_message_stats()`: Removed - not used in any endpoints
- `get_whatsapp_messages_by_mobile()`: Removed - not used in any endpoints
- `save_status_history()`: Removed - not used in any endpoints
- `get_status_history()`: Removed - not used in any endpoints
- `delete_otp()`: Removed - deprecated, use `mark_otp_as_used()` instead
- `cleanup_expired()`: Removed - handled by database function
- `is_otp_exists()`: Removed - commented out in code
- `extract_phone_number_from_message()`: Removed - not used in webhook
- `extract_application_id_from_message()`: Removed - not used in webhook
- `StatusHistoryResponse` schema: Removed - not used

## Debug Endpoints
- `/api_v1/health`: Health check endpoint
- Check logs for service initialization status
- Monitor WhatsApp service configuration
- Monitor database connection status 